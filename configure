#!/bin/sh
#
#! \file    ./configure
#! \author  Jiří Kučera, <jkucera AT redhat.com>
#! \stamp   2017-12-29 16:47:31 (UTC+01:00, DST+00:00)
#! \project pkgtools: Tools for Maintaining Fedora Packages
#! \license MIT (see ./LICENSE)
#! \version See ./VERSION
#! \fdesc   Configure the project.
#

script_dir=$(dirname $0)

bindir='/usr/bin'
datadir='/usr/share'
cfgdir='/etc'

FLAGS=""
FLAGS_EXPORTED=""
DIRS=""
DIRS_EXPORTED=""
PROGS=""
PROGS_EXPORTED=""
EDIT=""

OUTPUT='vars.cfg'

error() {
  echo "$0: error: $*" >&2
  exit 1
}

addflag() {
  if [ -z "$FLAGS" ]; then
    FLAGS="$1=$2"
    FLAGS_EXPORTED="$1"
  else
    FLAGS="$FLAGS;$1=$2"
    FLAGS_EXPORTED="$FLAGS_EXPORTED $1"
  fi
  addedit $1 $2
}

adddir() {
  if [ -z "$DIRS" ]; then
    DIRS="$1='$2'"
    DIRS_EXPORTED="$1"
  else
    DIRS="$DIRS;$1='$2'"
    DIRS_EXPORTED="$DIRS_EXPORTED $1"
  fi
  addedit $1 "$2"
}

addprog() {
  if [ -z "$PROGS" ]; then
    PROGS="$1_prog='$2'"
    PROGS_EXPORTED="$1_prog"
  else
    PROGS="$PROGS;$1_prog='$2'"
    PROGS_EXPORTED="$PROGS_EXPORTED $1_prog"
  fi
  addedit "$1_prog" "$2"
}

addedit() {
  if [ -z "$EDIT" ]; then
    EDIT="-e 's|@$1@|$2|g'"
  else
    EDIT="$EDIT -e 's|@$1@|$2|g'"
  fi
}

require() {
  local T

  command -v $1 >/dev/null 2>&1 || error "\"$1\" not found. Please, install it."
  T=$(command -v $1)
  addprog $1 "$T"
}

assert_bash() {
  local T

  T=$($1 --version | grep -e 'bash')
  [ -z "$T" ] && error "$1 must be GNU bash!"
}

# File & directory utils
require mkdir
require cp
require rm
require ls
require chmod
# Text utils
require cat
require expr
require sed
require grep
# Automation utils
require sh
require make
# We use GNU bash
assert_bash sh
assert_bash /bin/sh

dryrunflag=0
forcermflag=0
verboseflag=0

for arg; do
  case "$arg" in
    --bindir=*)
      bindir=$(expr "$arg" : '^--bindir=\(..*\)$')
      [ -z "$bindir" ] && error "ill-formed '--bindir=DIR' option"
      ;;
    --cfgdir=*)
      cfgdir=$(expr "$arg" : '^--cfgdir=\(..*\)$')
      [ -z "$cfgdir" ] && error "ill-formed '--cfgdir=DIR' option"
      ;;
    --datadir=*)
      datadir=$(expr "$arg" : '^--datadir=\(..*\)$')
      [ -z "$datadir" ] && error "ill-formed '--datadir=DIR' option"
      ;;
    --dry-run)
      dryrunflag=1
      ;;
    --force-rm)
      forcermflag=1
      ;;
    --help | -h | -\?)
      echo "Usage: $0 [options]"
      echo ""
      echo "Configure pkgtools. Options are"
      echo ""
      echo "  --bindir=DIR		set the target directory for executables (/usr/bin as default)"
      echo "  --cfgdir=DIR		set the target directory for configuration (/etc as default)"
      echo "  --datadir=DIR		set the target directory for application data (/usr/share as default)"
      echo "  --dry-run		do not install/remove anything, but show the corresponding actions"
      echo "  --force-rm		do not prompt the user when file/directory is going to be removed"
      echo "  -h, -?, --help	print this screen and exit"
      echo "  --verbose		build & install will be verbose"
      echo "  --version		print the version and exit"
      echo ""
      exit 0
      ;;
    --verbose)
      verboseflag=1
      ;;
    --version)
      cat "$script_dir/VERSION"
      exit 0
      ;;
    *)
      error "invalid option '$arg'"
  esac
done

addflag VERSION $(cat "$script_dir/VERSION")
addflag VERBOSE $verboseflag
addflag DRY_RUN $dryrunflag
addflag FORCE_RM $forcermflag
adddir BIN_DIR "$bindir"
adddir CFG_DIR "$cfgdir"
adddir DATA_DIR "$datadir"

# Create Makefile from its template
(eval "sed $EDIT \"$script_dir/Makefile.in\"" | sed -e 's|=@=|@|g') > "$script_dir/Makefile"

# Create $OUTPUT
(
  echo "#"
  echo -n "# Automatically generated by $0"
  [ "$*" ] && echo -n " $*"
  echo ""
  echo "#"
  echo ""
  oIFS=$IFS
  IFS=';'
  echo "# Flags"
  for x in $FLAGS; do
    echo "$x"
  done
  [ "FLAGS_EXPORTED" ] && echo "export $FLAGS_EXPORTED"
  echo ""
  echo "# Directories"
  for x in $DIRS; do
    echo "$x"
  done
  [ "$DIRS_EXPORTED" ] && echo "export $DIRS_EXPORTED"
  echo ""
  echo "# Programs"
  for x in $PROGS; do
    echo "$x"
  done
  [ "$PROGS_EXPORTED" ] && echo "export $PROGS_EXPORTED"
  IFS=$oIFS
) > "$script_dir/$OUTPUT"

# Inform the user
(
  echo "Configured with:"
  oIFS=$IFS
  IFS=';'
  T="$FLAGS;$DIRS;$PROGS"
  for x in $T; do
    echo "- $x" | sed -e 's|=|:	|g'
  done
  IFS=$oIFS
  echo ""
)

exit 0
