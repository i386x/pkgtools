#
#! \file    ./etc/pk-maint
#! \author  Jiří Kučera, <jkucera AT redhat.com>
#! \stamp   2018-01-15 23:13:46 (UTC+01:00, DST+00:00)
#! \project pkgtools: Tools for Maintaining Fedora Packages
#! \license MIT (see ./LICENSE)
#! \version See ./VERSION
#! \fdesc   Completion for pk-maint.
#

_pk_maint_project_root_finder='
import sys
import os

up = lambda p: os.path.realpath(os.path.join(p, os.pardir))
bye = sys.exit

def gotcha(what):
    sys.stdout.write("%s\n" % what)
    bye(0)

# Starting at current working directory, go up and lookup for project root:
p = os.getcwd()
p_ = p
while True:
    pp = os.path.join(p, ".pk-maint")
    if os.path.isdir(pp):
        gotcha(p)
    p = up(p)
    if p == p_:
        break
    p_ = p
'

_pk_maint_word_filter='
import sys
import os
import fnmatch

jp = os.path.join
np = os.path.normpath
pos2sys = { ".": os.path.curdir, "..": os.path.pardir }
tp = lambda p: jp(*[ pos2sys.get(x, x) for x in p.split("/") ])

def addwords(dest, wl, w = ""):
    for x in wl:
        if x not in dest and x.startswith(w):
            dest.append(x)

invert = lambda x, u: [ e for e in u if e not in x ]

# usage: pk-maint-wf [options] -- words
# options:
#     -r prjroot    set project root
#     -s N          skip N words after "--"
bye = sys.exit
join = lambda p, *ps: np(jp(p, *[ tp(x) for x in ps ]))
argv = sys.argv
argc = len(argv)
argi = 1
prjroot = ""
wskip = 0

def error(msg, *args):
    sys.stderr.write("%s\n" % (msg % args))
    bye(1)

def needargval(argi, argv):
    if argi + 1 < argc:
        return
    error("%s: missing value", argv[argi])

while argi < argc and argv[argi] != "--":
    if argv[argi] == "-r":
        needargval(argi, argv)
        argi += 1
        prjroot = argv[argi]
    elif argv[argi] == "-s":
        needargval(argi, argv)
        argi += 1
        try:
            wskip = int(argv[argi])
        except:
            wskip = 0
    argi += 1

if not prjroot:
    bye(0)

db = ""
try:
    with open(join(prjroot, ".pk-maint", "completion")) as f:
        db = f.read()
except:
    pass
if not db:
    bye(0)

def squash(l):
    r = []
    for x in l:
        if not x:
            continue
        if x[-1] == "\\":
            x = x[:-1] + " "
        if r and r[-1][-1] == " ":
            r[-1] = r[-1] + x
        else:
            r.append(x)
    return r

db = db.split("\n")
db = [ x for x in db if x ]
db = [ squash(x.split(" ")) for x in db ]

if argi < argc and argv[argi] == "--":
    argi += 1

querry = []
while argi < argc:
    if wskip > 0:
        argi += 1
        wskip -= 1
        continue
    w = argv[argi]
    argi += 1
    if w and w[0] == "-":
        continue
    querry.append(w)
if not querry:
    querry.append("")

def select(db, w, fm):
    r = []
    for x in db:
        if not x or not x[0]:
            continue
        elif fm and x[0] == w:
            r.append(x[1:])
        elif not fm and (x[0][0] == "-" or x[0].startswith(w)):
            r.append(x)
    return r

w = ""
while querry:
    w = querry.pop(0)
    db = select(db, w, len(querry) > 0)

def filter_func(p, files, func, exclude):
    r = [ f for f in files if func(join(p, f)) ]
    if exclude:
        r = invert(r, files)
    return r

def filter_pat(p, files, pat, exclude):
    pats = [ x for x in pat.split(" ") if x ]
    r = []
    for pat in pats:
        try:
            addwords(r, fnmatch.filter(files, pat))
        except:
            pass
    if exclude:
        r = invert(r, files)
    return r

opt2func = { "-f": os.path.isfile, "-d": os.path.isdir }

def filter(p, files, opts):
    exclude = False
    while opts:
        o = opts.pop(0)
        if o in opt2func:
            files = filter_func(p, files, opt2func[o], exclude)
            exclude = False
        elif o == "-P":
            if not opts:
                return files
            pat = opts.pop(0)
            files = filter_pat(p, files, pat, exclude)
            exclude = False
        elif o == "-X":
            exclude = True
    return files

def expand_directory(words, opts, w):
    if not opts:
        return
    p = opts.pop(0)
    if not p:
        return
    p = join(prjroot, p)
    try:
        files = os.listdir(p)
    except:
        return
    if not files:
        return
    files = filter(p, files, opts)
    addwords(words, files, w)

def expand(words, opts, w):
    if not opts:
        return
    elif opts[0] == "-l":
        addwords(words, opts[1:], w)
    elif opts[0] == "-d":
        expand_directory(words, opts[1:], w)

words = []
for x in db:
    if x[0][0] == "-":
        expand(words, x, w)
    else:
        if x[0] not in words:
            words.append(x[0])
words.sort()

sys.stdout.write("%s\n" % " ".join(words))
'

_pk_maint() {
  COMPREPLY=()
  prjroot=$(python -c "${_pk_maint_project_root_finder}")
  if [ -z "$prjroot" ]; then
    return 0
  fi
  COMPREPLY=( $(python -c "${_pk_maint_word_filter}" -r "$prjroot" -s 1 -- "${COMP_WORDS[@]}" ) )
}

complete -F _pk_maint pk-maint
