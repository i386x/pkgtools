#
#! \file    ./etc/pk-maint
#! \author  Jiří Kučera, <jkucera AT redhat.com>
#! \stamp   2018-01-15 23:13:46 (UTC+01:00, DST+00:00)
#! \project pkgtools: Tools for Maintaining Fedora Packages
#! \license MIT (see ./LICENSE)
#! \version See ./VERSION
#! \fdesc   Completion for pk-maint.
#

_pk_maint_project_root_finder='
import sys
import os

up = lambda p: os.path.realpath(os.path.join(p, os.pardir))
bye = sys.exit

def gotcha(what):
    sys.stdout.write("%s\n" % what)
    bye(0)

# Starting at current working directory, go up and lookup for project root:
p = os.getcwd()
p_ = p
while True:
    pp = os.path.join(p, ".pk-maint")
    if os.path.isdir(pp):
        gotcha(p)
    p = up(p)
    if p == p_:
        break
    p_ = p
'

_pk_maint_find_act_targets() {
  if [ -f "$1/Maintfile" ]; then
    cat "$1/Maintfile" | \
    grep -E '^autocomplete_(downstreams|tarballs)[ \t]+[a-zA-Z_][a-zA-Z0-9_]*.*' | \
    sed  -e 's/^autocomplete_\([a-zA-Z][a-zA-Z0-9_]*\)[ \t][ \t]*\([a-zA-Z_][a-zA-Z0-9_]*\).*/\2.\1/g'
  fi
}

_pk_maint_gather_downstreams() {
  if [ -d "$1/downstream" ]; then
    (cd "$1/downstream"; ls -1)
  fi
}

_pk_maint_gather_tarballs() {
  if [ -d "$1/.pk-maint/sourcecache" ]; then
    (cd "$1/.pk-maint/sourcecache"; ls -a1 | grep -E '\.(bz2|gz|tgz|xz)$')
  fi
}

_pk_maint() {
  local first_no_opt nargs t_
  local cur cur_target prjroot targets targets_ downstreams tarballs found

  COMPREPLY=()

  cur="${COMP_WORDS[COMP_CWORD]}"

  # Find the project root:
  prjroot=$(python -c "${_pk_maint_project_root_finder}")
  if [ "$prjroot" ]; then
    # Find out which targets from Maintfile should be autocompleted:
    targets=( $(_pk_maint_find_act_targets "$prjroot") )
    targets_=( $(for x in "${targets[@]}"; do echo "${x%.*}"; done) )
    # Gather downstreams:
    downstreams=( $(_pk_maint_gather_downstreams "$prjroot") )
    # Gather tarballs:
    tarballs=$(_pk_maint_gather_tarballs "$prjroot")
    if [ "x${targets[0]}" != "x" ]; then
      # targets is not empty, let's complete:
      # - skip options first
      for ((first_no_opt = 1; first_no_opt <= COMP_CWORD; first_no_opt++)); do
        if [[ "${COMP_WORDS[first_no_opt]}" != -* ]]; then
          break
        fi
      done
      # - count remaining arguments:
      if [[ $first_no_opt > $COMP_CWORD ]]; then
        first_no_opt=$COMP_CWORD
      fi
      nargs=$((COMP_CWORD - first_no_opt))
      if ((nargs == 0)); then
        # `pk-maint x' case:
        found=0
        for t_ in "${targets[@]}"; do
          if [ "${t_%.*}" = "$cur" ]; then
            found=1
            break
          fi
        done
        if ((found == 1)); then
          # `x' is the full command name -> second arg will be autocompleted
          case "${t_#*.}" in
            downstreams)
              if [ -z "$downstreams" ]; then
                return 0
              fi
              COMPREPLY=( ${downstreams} )
              ;;
            tarballs)
              if [ -z "$tarballs" ]; then
                return 0
              fi
              COMPREPLY=( ${tarballs} )
              ;;
          esac
          # unknown category -> no completion
        else
          # `x' not found -> `x' is possibly a partial target name
          COMPREPLY=( $(compgen -W "${targets_[*]}" -- ${cur}) )
        fi
      elif ((nargs == 1)); then
        # `pk-maint x y' case:
        cur_target="${COMP_WORDS[first_no_opt]}"
        found=0
        for t_ in "${targets[@]}"; do
          if [ "${t_%.*}" = "${cur_target}" ]; then
            found=1
            break
          fi
        done
        if ((found == 1)); then
          # we know the target, try to complete its argument:
          case "${t_#*.}" in
            downstreams)
              if [ -z "$downstreams" ]; then
                return 0
              fi
              COMPREPLY=( $(compgen -W "$downstreams" -- ${cur}) )
              ;;
            tarballs)
              if [ -z "$tarballs" ]; then
                return 0
              fi
              COMPREPLY=( $(compgen -W "$tarballs" -- ${cur}) )
              ;;
          esac
          # unknown target category
        fi
        # unknown target
      fi
      # not `pk-maint [options] target argument'
    fi
    # no targets for completion defined
  fi
  # not inside pk-maint project directory
}

complete -F _pk_maint pk-maint
